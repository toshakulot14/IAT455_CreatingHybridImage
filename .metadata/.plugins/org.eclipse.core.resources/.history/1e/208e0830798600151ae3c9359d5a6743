/*File CreatingHybridImages.java

 IAT455 - Course Project
 Creating Hybrid Images
 
 Starter code
 **********************************************************/

import java.awt.Color;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.awt.image.WritableRaster;
import java.io.File;

import javax.imageio.ImageIO;

/** 
 * ---------- Class extends Frame ----------
 **/
class CreatingHybridImages extends Frame {

	// ----------------------- Class Members: -----------------------
	
	// ------ Source Images ------
	// NOTE: replace variable names with more appropirate later on.
	/**
	 * First Source Image, for Edge Detection (Church image on Lab 3).
	 **/
	BufferedImage firstSourceImage;
	
	/**
	 * Second Source Image, for Blur (Animal on grass Image on Lab 9).
	 **/
	BufferedImage secondSourceImage;


	// ------ Image results from edge detection and blur: ------
	BufferedImage result_edgeDetection, result_blur;
	
	
	// ---------------------------------------------------------------
	
	
	/**
	 * Constructor
	 */
	public CreatingHybridImages(){

		// --- Load source images: ---
		// NOTE: replace variable names AND appropriate source images.
		try{
			firstSourceImage = ImageIO.read(new File("church.jpg"));
			secondSourceImage = ImageIO.read(new File("animal.jpg"));
		} catch (Exception e){
			System.out.println("Error: " + e);
		}

		// --- Frame: ---
		this.setTitle("Course Project - Creating Hybrid Images");
		this.setVisible(true);

		// --- Images results from convolve functions: ---
		result_edgeDetection = convolve(firstSourceImage, Operations.edge_detection);
		result_blur = convolve(secondSourceImage, Operations.blur);


		// Anonymous inner-class listener to terminate program
		this.addWindowListener(
				new WindowAdapter(){//anonymous class definition
					public void windowClosing(WindowEvent e){
						System.exit(0);//terminate the program
					}//end windowClosing()
			} //end WindowAdapter
		); //end addWindowListener
	}
	
	/**
	 * Convolve function. <br/><br/>
	 * 
	 * @param src : &nbsp Image source.
	 * @param op : &nbsp <u><i>edge_detection</i></u> or <u><i>blur</i></u>.
	 * @return a {@code BufferedImage} with applied convolve function.
	 */
	public BufferedImage convole(BufferedImage src, Operations op){
		WritableRaster wRaster = src.copyData(null);
		BufferedImage copy = new BufferedImage(src.getColorModel(), wRaster, src.isAlphaPremultiplied(), null);

		for (int i=1; i<src.getWidth()-1; i++){
			for (int j=1; j<src.getHeight()-1; i++){
				
			}
		}

		return copy;
	}
	
	public void paint(Graphics g){
		
		// Resized First Source Image:
		int w_firstSrcImg = firstSourceImage.getWidth()/2;
		int h_firstSrcImg = firstSourceImage.getHeight()/2;
		// Resized Second Source Image:
		int w_secondSrcImg = secondSourceImage.getWidth();
		int h_secondSrcImg = secondSourceImage.getHeight();

		// Window Size:
		this.setSize(w_firstSrcImg+30+w_secondSrcImg, h_firstSrcImg+30+h_secondSrcImg);
		
		// g.drawImage(firstSourceImage, 25, 50, w, h, this);
		
		
		
	}

	/**
	 * Main Function
	 **/
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
